package bitvector_test

import (
	"strings"
	"testing"

	"github.com/paulheg/kit_advanced_data_structures/internal/bitvector"
	"github.com/stretchr/testify/assert"
)

func TestFileProcessor(t *testing.T) {
	testCases := []struct {
		desc     string
		input    string
		expected string
	}{
		{
			desc: "standard example",
			input: `6
001110110101010111111111
access 4
rank 0 10
select 1 14
rank 1 10
select 0 3
access 5`,
			expected: `1
4
20
6
5
0
`,
		},
		{
			desc: "simple test zeros",
			input: `7
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
access 0
access 1
access 2
access 3
access 4
access 5
access 88
`,
			expected: `0
0
0
0
0
0
0
`,
		},
		{
			desc: "simple test access",
			input: `7
11110000111100001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000
access 0
access 1
access 2
access 3
access 4
access 5
access 88
`,
			expected: `1
1
1
1
0
0
1
`,
		},
		{
			desc: "simple test access alternating",
			input: `5
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010
access 0
access 1
access 22
access 23
access 40
`,
			expected: `0
1
0
1
0
`,
		},
		{
			desc: "nothing working bro",
			input: `10

rank 0 698
access 1028
rank 0 284
access 1129
access 884
select 0 53
access 1228
select 1 65
access 13
select 1 73
`,
			expected: `329
1
139
0
1
120
0
114
0
133
`,
		},
	}
	for _, tC := range testCases {
		t.Run(tC.desc, func(t *testing.T) {

			input := strings.NewReader(tC.input)

			var output strings.Builder
			var statOut strings.Builder

			err := bitvector.ProcessFile(input, &output, &statOut, false)
			assert.NoError(t, err)

			assert.Equal(t, tC.expected, output.String())
			t.Log(statOut.String())
		})
	}
}
