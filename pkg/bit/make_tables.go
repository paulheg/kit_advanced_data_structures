//go:build ignore

// This program generates bits_tables.go.

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
)

var header = []byte(`
// Code generated by go run make_tables.go. DO NOT EDIT.

package bit

`)

func main() {
	buf := bytes.NewBuffer(header)

	genOnes(buf)

	// log.Print(buf.String())

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	err = os.WriteFile("bits_tables.go", out, 0666)
	if err != nil {
		log.Fatal(err)
	}
}

func genOnes(w io.Writer) {
	const name = "onesLookup"

	// Use a const string to allow the compiler to constant-evaluate lookups at constant index.
	fmt.Fprintf(w, "const %s = \"\"+\n", name)

	const validBit = 0b1000
	const posMask = 0b0111

	const size = 256

	lookup := make([]uint32, size)

	for i := 0; i < size; i++ {
		var r uint32 = 0
		count := 0
		for j := 0; j < 8; j++ {
			if i>>j&1 == 1 {
				r |= uint32((j | validBit) << (count * 4))
				count++
			}
		}
		lookup[i] = r
		fmt.Fprintf(w, `"`+"\\x%02x\\x%02x\\x%02x\\x%02x"+`"`, r&0xFF, (r>>8)&0xFF, (r>>16)&0xFF, (r>>24)&0xFF)

		if i < size-1 {
			w.Write([]byte("+ \n"))
		}
	}
	fmt.Fprint(w, "\n\n")
}
